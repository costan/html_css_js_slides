h1. CSS: Cascading Style Sheets

h1. CSS is for Presentation

Change %{color: red;}color%, %{font-size: 2em;}size%, %{font-family: monospace;}font%, and <span style="display: inline-block; position: relative; left: 20%; top: 4em;">position</div>

h1. Adding CSS: Very Bad

:inlinecode[lang=html]
<p style="color: red;"/>This is a red paragraph.</a>
:endinlinecode

* Used for debugging or quick experimentation.
* Bad: mixes presentation with markup.
* Bad: instructions here cannot be overridden by external files.

h1. Adding CSS: Somewhat Bad

:inlinecode[lang=html]
<style type="text/css">
  p { color: red; }
</style>
<p>This is a red paragraph.</p>
:endinlinecode

* @<style>@ tags are allowed in @<head>@ and @<body>@.
* Bad: presentation embedded in markup.
* Only _one_ good reason to use this: your resume in a self-contained file.

h1. Adding CSS: Good

:code code/css/include_good.html[lang=html]

:code code/css/red.css[lang=css]

@<link>@ tags are only allowed in @<head>@.

h1. Adding CSS: If You Can't Access @<head>@

:code code/css/include_no_head.html[lang=html]

h1. What CSS Looks Like

:code code/css/sample.css[lang=css]

* A CSS file is a sequence of rules.

h1. CSS Anatomy: Rules, Selectors, Declarations

:inlinecode[lang=css]
h1 { color: blue; }

p em {
  font-size: 12pt;
  line-height: 1.2em;
}
:endinlinecode


|        | Selector | Declarations |
| Rule 1 | @h1@     | @color: red;@  |
| Rule 2 | @p em@   | @font-size: 12pt; line-height: 1.2em;@  |

The selector comes first, then the declarations are enclosed by brackets.

h1. CSS Anatomy: Properties and Values

:inlinecode[lang=css]
h1 { color: blue; }

p em {
  font-size: 12pt;
  font-family: Arial, Helvetica, sans-serif;
}
:endinlinecode

| Property      | Value                          |
| @color@       | @red@                          |
| @font-size@   | @12pt@                         |
| @line-height@ | @Arial, Helvetica, sans-serif@ |

Each declaration in a rule specifies a value for a property.

h1. CSS Anatomy: Directives

:inlinecode[lang=css]
@include url("code/css/red.css");

@font-face {
  font-family: Myriad Pro;
  src: url("fonts/Myriad_Pro.otf");
} 
:endinlinecode

* Directives start with <code>@</code>.
* Presentation information that doesn't fall under the selector/declaration model.

h1. CSS Selectors: Primitives

* All @p@ elements.

:inlinecode[lang=css]
p { color: red; }
:endinlinecode

* The element with @id="summary"@.

:inlinecode[lang=css]
#summary { color: blue; }
:endinlinecode

* All elements whose @class@ attribute contains @highlight@.

:inlinecode[lang=css]
.highlight { color: red; }
:endinlinecode

h1. CSS Selectors: Classes

:inlinecode[lang=css]
.small { font-size: 10pt; }
.highlight { color: red; }
:endinlinecode

:inlinecode[lang=html]
<p class="highlight">This is highlighted.</p>
<p class="highlight small">This is small and highlighted.</p>
<p class="small">This is small.</p>
:endinlinecode

The @class@ attribute can contain multiple class names, separated by spaces.

h1. CSS Selectors: Compositions

* AND: concatenate selectors

:inlinecode[lang=css]
/* <p> elements whose class contains highlight and small */
p.highlight.small { color: red; }
:endinlinecode

* OR: separate by @,@

:inlinecode[lang=css]
/* <h1> <h2> and <h3> elements */
h1, h2, h3 { color: red; }
:endinlinecode

* Descendant of: separate by space

:inlinecode[lang=css]
/* <p> elements inside <form> elements */
form p { color: blue; }
:endinlinecode

h1. CSS Selectors: Advanced Compositions

* Child of: separate by @>@

:inlinecode[lang=css]
/* <p> elements who are direct children of <form> elements */
form > p { color: blue; }
:endinlinecode

* Immediately after (next sibling): separate by @+@

:inlinecode[lang=css]
/* <p> elements coming right after <ul> elements */
ul + p { color: gray; }
:endinlinecode

* Immediately after (sibling): separate by @~@

:inlinecode[lang=css]
/* <p> elements whose parents have <ul> children, and
   who come after the <ul> children in the document */
ul ~ p { color: gray; }
:endinlinecode

h1. CSS Selectors: Pseudo-Classes

| @:hover@   | The user's mouse is over the element                           |
| @:focus@   | The control has the input focus                                |
| @:active@  | The user is about to activate the element (e.g. follow a link) |
| @:link@    | The element is a link that the user has not visited            |
| @:visited@ | The element is a link that the user has visited                |

h1. CSS Selectors: Pseudo-Class Example

:inlinecode[lang=css]
a:link { color: blue; }
a:visited { color: gray; }
a:hover { color: red; }
a:active { color: black; }
:endinlinecode

What does this do?
*(incremental) Unvisited links are blue. Visited links are gray.
*(incremental) When the user's mouse hovers over a link, it turns red.
*(incremental) When the user clicks on a link, it becomes black.

h1. CSS Selectors: Advanced Pseudo-Classes

| @:first@ | The first child (e.g. the first paragraph in the body) |
| @:last@  | The last child |
| @:nth-child(even)@ | All even children (2nd, 4th, ...) |
| @:nth-child(2n)@ | All even children (2nd, 4th, ...) |
| @:nth-child(odd)@ | All odd children |
| @:nth-child(2n+1)@ | All odd children |

Very useful for improving readability by alternating font colors in lists and tables.

h1. CSS Selectors: the Selectoracle

:inlinecode[lang=css]
ul#master-index > li:nth-child(even).small p.highlighted.twisted.legal a:hover
:endinlinecode

<div class="incremental">
A hovered link inside
a paragraph (@<p>@) with classes @highlighted@ and @twisted@ inside
a list item (@<li>@) with class @small@ which is an even child of
an unordered list (@<ul>@) with @id="master-index"@ 
</div>

h1. The Cascade: The C in CSS

:inlinecode[lang=css]
p { color: red; }
p { color: blue; }
:endinlinecode
:inlinecode[lang=html]
<p>What color is this paragraph?</p>
:endinlinecode

*(incremental) The paragraph is blue, so the last declaration wins.

:inlinecode[lang=css]
p.highlight { color: red; }
p { color: blue; }
:endinlinecode
:inlinecode[lang=html]
<p class="highlight">What color is this paragraph?</p>
:endinlinecode

*(incremental) The paragraph is red, because the first declaration is more specific.

h1. The Cascade: How It Works

Declarations have the following priority:

# Declarations in @style@ attributes always win.
# Browser declarations marked @!important@, ordered by specificity.
# Page declarations marked @!important@, ordered by specificity.
# Page declarations not marked @!important@, ordered by specificity.
# Browser declarations not marked @!important@, ordered by specificity.

h1. The Cascade: Specificity Point System

A declaration's specifity is determined by its selector.

To compute a selector's specificity:
# Write the number of IDs in the selector
# Write the number of classes and pseudo-classes in the selector
# Write the number of elements in the selector

h1. The Cascade: Specificity Examples

:inlinecode[lang=css]
p#header { color: red; }
:endinlinecode

*(incremental) Specificity: 1, 0, 1

:inlinecode[lang=css]
p li.highlight { color: red; }
:endinlinecode

*(incremental) Specificity: 0, 1, 2

:inlinecode[lang=css]
#header p.small a:hover { color: red; }
:endinlinecode

*(incremental) Specificity: 1, 2, 2

h1. The Cascade: Ordering Specificities

Specificities are ordered lexicographically:

* 0, 0, 2 is more specific than 0, 0, 1
* 0, 1, 0 is more specific than 0, 0, 99
* 2, 0, 0 is more specific than 1, 99, 99
* 2, 1, 2 is more specific than 2, 0, 2

h1. CSS Declarations

Declarations cover these major areas
# Color
# Size
# Font
# Position

h1. CSS Colors: Properties

* @color@ - the foreground color (text, list bullets)
* @background-color@
* @border-color@

h1. CSS Colors: RGB Color Model

* Components: red, green, blue
* Additive: red + green + blue = white
* NOT Subtractive: in painting, red + yellow + blue = black

h1. CSS Colors: RGB Color Wheel

<div style="text-align: center;">
!{width:50%;}images/rgb_colorwheel.svg!
</div>

h1. CSS Colors: Values

* Keywords for a few colors:

:inlinecode[lang=css]
p { color: red; }
:endinlinecode

* RGB notation:

:inlinecode[lang=css]
p { color: rgb(255, 0, 0); }
:endinlinecode

* Hex-RGB notation:

:inlinecode[lang=css]
p { color: #FF0000; }
:endinlinecode

h1. CSS Dimensions: Properties

* @width@, @height@, @min-height@, @max-height@, @min-width@, @max-width@ - the size of an element's box
* @font-size@, @text-indent@, @line-height@ - typography
* @border-width@, @padding@, @margin@ - layout stuff
* @top@, @right@, @bottom@, @left@ - more layout stuff

h1. CSS Dimensions: Values

:inlinecode[lang=css]
p {
  border-width: 2px;
  font-size: 12pt;
  width: 80%;
  min-height: 8em;
  margin: 1cm;
}
:endinlinecode

* Size values have a number and a unit of measurement.
* Only 0 does not nead a unit of measurement.

h1. CSS Dimensions: Absolute Units

* @px@ - pixels; defined by the screen's resolution
* @cm@, @mm@, @in@ - physical units, size changes with screen resolution
* @pt@ - points; usually used for fonts; 1 pt = 1/72 in

The absolute units don't need a context to be interpreted.

h1. CSS Dimensions: Relative Units

* @%@ - percentage of some other size
* @em@ - the @font-size@ of the parent element

For @%@, the size is usually the same size in the parent element.

* @width@, @min-width@, @max-width@ refer to the @width@ of the parent element.
* @font-size@ refers to the @font-size@ of the parent element.

h1. CSS Typography: Serif vs. Sans Serif Fonts

* Serif font vs sans-serif font

<div style="text-align: center;">
!{width:40%;}images/serif_vs_sans_serif_s.svg! <span style="display:inline-block; width:10%;">&nbsp;</span> !{width:40%;}images/serif_vs_sans_serif_ss.svg!
</div>

* Serif font with red serifs

<div style="text-align: center;">
!{width:50%;}images/serif_vs_sans_serif_rs.svg!
</div>

h1. CSS Typography: Monospaced Fonts

* The difference between monospaced fonts and proportional fonts.

<div style="text-align: center;">
!{width:50%;}images/proportional_vs_monospaced.svg!
</div>

* Proportional fonts are easier to read, and are used in most places.
* Monospaced fonts make it easy to line up text vertically. Useful for: coding, representing tables (e.g. receipts, accounting stuff), retro looks.

h1. CSS Fonts: Font Families

Generic families: %{font-family: serif;}serif%, %{font-family: sans-serif;}sans-serif%, %{font-family: monospace;}monospace%, %{font-family: cursive;}cursive%, %{font-family: fantasy;}fantasy%

Fonts available on most computers:

| %{font-family: serif;}serif% | %{font-family: sans-serif;}sans-serif% | %{font-family: monospace;}monospace% |
| <span style="font-family: Garamond;">Garamond</span> | <span style="font-family: Georgia;">Georgia</span> | <span style="font-family: Courier New;">Courier New</span> |
| <span style="font-family: Times New Roman;">Times New Roman</span> | <span style="font-family: Helvetica;">Helvetica</span> | |
| | <span style="font-family: Tahoma;">Tahoma</span> | |
| | <span style="font-family: Tahoma;">Verdana</span> | |

h1. CSS Typography: Choosing a Font

:inlinecode[lang=css]
p {
  font-family: Myriad Pro, Verdana, Tahoma, sans-serif;
}
:endinlinecode

* The browser looks for each font, in the specified order. Once a font is found, that font is used.
* Always use a generic font family as the last fall-back option.

h1. CSS Typography: Downloadable Fonts

:inlinecode[lang=css]
@font-face {
  font-family: Myriad Pro;
  src: url("fonts/Myriad_Pro.otf") format("otf");
}
:endinlinecode

* SVG fonts: supported by all recent browsers.
* OTF fonts: supported by Firefox, Chrome, Safari.
* WOFF fonts: supported by IE, Firefox 3.6+

h1. CSS Typography: Font Styles

* A single font-family can have many styles of glyphs.
* Well-known styles: bold, italic, and underline.
* CSS properties: @font-style@, @font-variant@, @text-decoration@

| @font-style@ | @font-variant@ | @text-decoration@ |
| %{font-style:italic;}italic% | %{font-variant:small-caps}small-caps% | %{text-decoration:underline}underline% |
| %{font-style:oblique;}oblique% | %{font-variant:normal}normal% | %{text-decoration:overline}overline% |
| %{font-style:normal}normal% | | %{text-decoration:line-through}line-through% |
| | | %{text-decoration:none}none% |

h1. CSS Typography: Font Weights

%{font-weight:ligther;}100 - lighter%
%{font-weight:normal;}400 - normal%
%{font-weight:bold;}700 - bold%
%{font-weight:bolder;}800 - bolder%

h1. CSS Typography: The Em Box

* Each font glyph is designed inside a square box, called the em box.

<div style="text-align: center;">
!{width:50%;}images/the_em_box.svg!
</div>

* @font-size@ sets the size of the em box.
* @1 em@ is the size of the current font's em box, not the size of capital M.

h1. CSS Typography: Important Lines

<div style="text-align: center;">
!{width:90%;}images/typography_line_terms.svg!
</div>

* The median line is used for @line-height@, discussed next.

h1. CSS Typography: Line Height

:inlinecode[lang=css]
p {
  font-size: 12pt;
  line-height: 2em;
}
:endinlinecode

* The rule above is equivalent to double spacing in word processors.
* @line-height@ > @font-size@: the difference is divided by two, added to the top and bottom of the em boxes
* @line-height@ < @font-size@: @line-height@ is divided by two, the halves go above and below the font's median line
